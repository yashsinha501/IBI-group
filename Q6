Callback hell, also known as the pyramid of doom, is a situation in asynchronous programming where multiple nested callbacks are used, making the
code difficult to read, understand, and maintain. It occurs when there are multiple levels of asynchronous operations, and each operation depends on
the result of the previous one.

Example of callback hell:

asyncOperation1(function (result1) {
  asyncOperation2(result1, function (result2) {
    asyncOperation3(result2, function (result3) {
      // More nested callbacks can continue...
    });
  });
});


Asynchronous operations are nested within each other, leading to deeply indented code that can be challenging to follow. This can make it difficult
to debug, test, and reason about the code, leading to reduced code quality.

To solve callback hell and make asynchronous code more manageable and readable, there are several approaches:

1. Using Named Functions:

Instead of using anonymous functions, you can define named functions for each step of the asynchronous operations. This makes the code more modular 
and easier to read.

function step1(result1) {
  // Do something with result1
  asyncOperation2(result1, step2);
}

function step2(result2) {
  // Do something with result2
  asyncOperation3(result2, step3);
}

function step3(result3) {
  // Final step with result3
}

asyncOperation1(step1);


2. Using Promises:

Promises provide a cleaner way to handle asynchronous operations and avoid callback hell. Instead of nested callbacks, you chain promises 
using `.then()`.

// Using promises
asyncOperation1()
  .then((result1) => {
    // Do something with result1
    return asyncOperation2(result1);
  })
  .then((result2) => {
    // Do something with result2
    return asyncOperation3(result2);
  })
  .then((result3) => {
    // Final step with result3
  })
  .catch((error) => {
    // Handle errors
  });


With promises, the code reads sequentially, and error handling is done with a single `.catch()` at the end of the chain.

3. Using Async/Await:

Async/await is a modern JavaScript feature that provides a more synchronous-looking code structure for handling asynchronous operations. It is built
on top of promises.

async function doAsyncOperations() {
  try {
    const result1 = await asyncOperation1();
    // Do something with result1

    const result2 = await asyncOperation2(result1);
    // Do something with result2

    const result3 = await asyncOperation3(result2);
    // Final step with result3
  } catch (error) {
    // Handle errors
  }
}

doAsyncOperations();


The `async` keyword is used before the function definition, and `await` is used before each asynchronous operation. This allows the code to
execute sequentially, making it easier to reason about and understand.

All three approaches aim to reduce nesting and improve code readability. While callbacks, promises, and async/await all have their strengths, the
choice depends on the project's requirements, the JavaScript environment, and personal/team preferences. Promises and async/await are generally
preferred for modern JavaScript development due to their readability and easier error handling.
